description = 'Java Common Internet File System'
apply from: "$rootDir/common.gradle"
usejavapluginconfig(project)
dependencies {
    //implementation project(':nanohttpd')
    //testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4.1'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    implementation group: 'org.slf4j', name: 'slf4j-api', version:'1.7.36'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version:'1.78.1'
    implementation 'org.apache.kerby:kerb-client:2.1.0'
    testImplementation group: 'org.slf4j', name: 'slf4j-reload4j', version:'1.7.36'
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version:'4.0.1'
    compileOnly group: 'javax.annotation', name: 'javax.annotation-api', version:'1.3.2'
}

// 1. Add the custom directory (recursively includes class files)
sourceSets {
    main {
        java {
            srcDirs += file("${rootProject.projectDir}/jcifs-fileserver/libs")
        }
    }
}
tasks.jar {
    // Include all .class files from the 'libs' directory in the JAR
    from(fileTree("${rootProject.projectDir}/jcifs-fileserver/libs")) {
        include '**/*.class'
    }
}
// 2. Add exports to avoid visibility issues during compile
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            /*"--add-exports", "java.security.jgss/sun.security.krb5=ALL-UNNAMED",
            "--add-exports", "java.security.jgss/sun.security.jgss=ALL-UNNAMED",
            "--add-exports", "java.security.jgss/org.ietf.jgss=ALL-UNNAMED",
            "--add-exports", "java.security.jgss/sun.security.jgss.krb5=ALL-UNNAMED",
            "--add-exports", "java.security.jgss/sun.security.krb5.internal=ALL-UNNAMED",
            "--add-exports", "java.security.jgss/sun.security.krb5.internal.crypto=ALL-UNNAMED"*/
    ]
    //Once I know the java.security.jgss and sun.security.jgss are fully removed then
    //then we can comment this guy as enforced by toolchain.
    //options.compilerArgs.removeIf { it.startsWith("--release") }
    //options.compilerArgs -= ["--release"]
}

// 3. Include dependencies and prioritize custom libraries
dependencies {
    implementation fileTree(dir: 'jcifs-fileserver/libs', include: ['*.class']) // Prioritize local JARs
}
